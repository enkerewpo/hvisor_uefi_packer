#!/bin/bash
# wheatfox 2025

set -e

# !!!!!!!!!!!!!!!!!!!!!!!! IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Change to your hvisor source code directory
HVISOR_SRC_DIR=../hvisor
# !!!!!!!!!!!!!!!!!!!!!!!! IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

if [ ! -d "${HVISOR_SRC_DIR}" ]; then
    echo "Error: hvisor source code directory not found: ${HVISOR_SRC_DIR}"
    echo "Please change the HVISOR_SRC_DIR variable in make_image.sh to your hvisor source code directory"
    exit 1
fi

# Read ARCH and BOARD from environment variables (default values if not set)
ARCH=${ARCH:-loongarch64}
BOARD=${BOARD:-ls3a5000}

# Log level - error, warn, info, debug, trace
HVISOR_LOG_LEVEL=$(grep CONFIG_HVISOR_LOG_LEVEL .config | cut -d'"' -f2)
HVISOR_ARGS="BID=${ARCH}/${BOARD} LOG=${HVISOR_LOG_LEVEL}"

# Make hvisor
make -C "${HVISOR_SRC_DIR}" ${HVISOR_ARGS}

# ANSI color codes
YELLOW="\033[1;33m"
GREEN="\033[1;32m"
BOLD="\033[1m"
RESET="\033[0m"

make ARCH="${ARCH}" clean

cd lib/gnu-efi && ./build-"${ARCH}".sh
cd ../..

VERBOSE=0
CMD="make ARCH=${ARCH} V=${VERBOSE}"
echo -e "${BOLD}${YELLOW}Building hvisor UEFI Boot Image, CMD=$CMD${RESET}"
$CMD

echo -e "${BOLD}${YELLOW}Building hvisor shared object, now building hvisor UEFI Boot Image${RESET}"

# Set the cross-compile tools according to ARCH
case "${ARCH}" in
    aarch64)
        PREFIX="aarch64-linux-gnu-"
        EFI_NAME="BOOTAA64.EFI"
        ;;
    loongarch64)
        PREFIX="loongarch64-unknown-linux-gnu-"
        EFI_NAME="BOOTLOONGARCH64.EFI"
        ;;
    *)
        echo "Error: unsupported ARCH: ${ARCH}"
        exit 1
        ;;
esac

OBJCOPY="${PREFIX}objcopy"
READELF="${PREFIX}readelf"
OBJDUMP="${PREFIX}objdump"

TARGET_SO="main/built-in.o"
TARGET_EFI="hvisor.efi"

rm -f "${EFI_NAME}"  # Remove previous EFI output

CMD2="${OBJCOPY} -j .text -j .sdata -j .data -j .dynamic -j .dynsym -j .rel -j .rela -j .rel.* \
-j .rela.* -j .rel* -j .rela* -j .reloc -O binary ${TARGET_SO} ${TARGET_EFI}"
echo -e "${BOLD}${YELLOW}Building hvisor UEFI Boot Image, CMD=$CMD2${RESET}"
$CMD2

$READELF -a main/built-in.o > main/built-in.map
$OBJDUMP -d main/built-in.o > main/built-in.dis

# Rename output EFI file according to ARCH
cp "${TARGET_EFI}" "${EFI_NAME}"

# Print file info and size of generated EFI file
ls -lh "${EFI_NAME}"
file "${EFI_NAME}"

echo -e "${BOLD}${GREEN}Building hvisor UEFI Boot Image done${RESET}"

# Dump the .config file
if [ -f ".config" ]; then
    echo -e "${BOLD}${YELLOW}Dumping .config${RESET}"
    terminal_width=$(tput cols)
    # print = * terminal_width
    printf '=%.0s' $(seq 1 $terminal_width)
    cat .config
    printf '=%.0s' $(seq 1 $terminal_width)
    echo -e "${BOLD}${YELLOW}Done, please check the important options like (vmlinux.bin) and make sure they are correct${RESET}"
else
    echo -e "${BOLD}${YELLOW}.config file not found${RESET}"
fi
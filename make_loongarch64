#!/bin/bash
cat configs/wheatfox_defconfig >.config
ARCH=loongarch64 BOARD=ls3a5000 ./make_image

# Read paths from .config
HVISOR_SRC_DIR=$(grep "^CONFIG_HVISOR_SRC_DIR=" .config | cut -d'"' -f2)
HVISOR_LINUX_SRC=$(grep "^CONFIG_HVISOR_LA64_LINUX_DIR=" .config | cut -d'"' -f2)
BUILDROOT_DIR=$(grep "^CONFIG_BUILDROOT_DIR=" .config | cut -d'"' -f2)
HVISOR_TOOL_DIR=$(grep "^CONFIG_HVISOR_TOOL_DIR=" .config | cut -d'"' -f2)

# Color definitions
BOLD=$(tput bold)
RESET=$(tput sgr0)
GREEN=$(tput setaf 2)
RED=$(tput setaf 1)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
CYAN=$(tput setaf 6)

# Formatting functions
print_success() {
    echo -e "${BOLD}${GREEN}✓ SUCCESS:${RESET} $1"
}

print_error() {
    echo -e "${BOLD}${RED}✗ ERROR:${RESET} $1"
}

print_info() {
    echo -e "${BOLD}${BLUE}ℹ INFO:${RESET} $1"
}

print_warning() {
    echo -e "${BOLD}${YELLOW}⚠ WARNING:${RESET} $1"
}

if [ ! -d "$HVISOR_LINUX_SRC" ]; then
  exit 0
fi

if [ ! -d "$BUILDROOT_DIR" ]; then
  exit 0
fi

if [ ! -d "$HVISOR_SRC_DIR" ]; then
  exit 0
fi

CHOSEN=$(cat "$HVISOR_LINUX_SRC/chosen")
CHOSEN_ROOT=$(cat "$HVISOR_LINUX_SRC/chosen_root")
CHOSEN_NONROOT=$(cat "$HVISOR_LINUX_SRC/chosen_nonroot")

echo -e "${BOLD}${CYAN}=== System Information ===${RESET}"
echo -e "${BOLD} CHOSEN_ROOT:${RESET} $CHOSEN_ROOT"
echo -e "${BOLD} CHOSEN_NONROOT:${RESET} $CHOSEN_NONROOT"
echo -e "${BOLD}${CYAN} ROOT LINUX:${RESET} $(cat ${HVISOR_LINUX_SRC}/target/root/vmlinux.readelf.txt | grep "Entry")"
echo -e "${BOLD}${CYAN} NONROOT LINUX:${RESET} $(cat ${HVISOR_LINUX_SRC}/target/nonroot/vmlinux.readelf.txt | grep "Entry")"

# dump ROOT_ZONE_ENTRY from HVISOR_SRC_DIR/platform/loongarch64/ls3a5000/board.rs
echo -e "${BOLD}${CYAN} ROOT_ZONE_ENTRY:${RESET} $(cat ${HVISOR_SRC_DIR}/platform/loongarch64/ls3a5000/board.rs | grep "ROOT_ZONE_ENTRY")"

# Function to check entry points in all linux*.json files
check_linux_json_entries() {
    local json_dir="${BUILDROOT_DIR}/rootfs_ramdisk_overlay/tool"
    local expected_entry="$1"
    local error=0
    
    echo -e "\n${BOLD}${CYAN}=== Checking Entry Points in linux*.json Files ===${RESET}"
    
    # Find all linux*.json files and check their entry points
    for json_file in $(find "$json_dir" -name "linux*.json"); do
        local entry_point=$(cat "$json_file" | grep "entry_point" | awk '{print $NF}' | tr -d '",')
        local filename=$(basename "$json_file")
        
        if [ "$entry_point" != "$expected_entry" ]; then
            print_error "Entry point mismatch in $filename:"
            echo -e "  ${BOLD}Expected:${RESET} $expected_entry"
            echo -e "  ${BOLD}Found:${RESET}    $entry_point"
            error=1
        else
            print_info "Entry point in $filename matches expected: $entry_point"
        fi
    done
    
    if [ $error -eq 0 ]; then
        print_success "All linux*.json files have correct entry points!"
    fi
    
    return $error
}

# Extract entry points for comparison
ROOT_LINUX_ENTRY=$(cat ${HVISOR_LINUX_SRC}/target/root/vmlinux.readelf.txt | grep "Entry" | awk '{print $NF}')
NONROOT_LINUX_ENTRY=$(cat ${HVISOR_LINUX_SRC}/target/nonroot/vmlinux.readelf.txt | grep "Entry" | awk '{print $NF}')
ROOT_ZONE_ENTRY=$(cat ${HVISOR_SRC_DIR}/platform/loongarch64/ls3a5000/board.rs | grep "ROOT_ZONE_ENTRY" | awk '{print $NF}' | tr -d ';')
NONROOT_ENTRY_POINT=$(cat ${BUILDROOT_DIR}/rootfs_ramdisk_overlay/tool/linux2.json | grep "entry_point" | awk '{print $NF}' | tr -d '",')

# Compare entry points
echo -e "\n${BOLD}${CYAN}=== Entry Point Configuration Check ===${RESET}"
ERROR=0

if [ "$ROOT_LINUX_ENTRY" != "$ROOT_ZONE_ENTRY" ]; then
    print_error "Root Linux entry point mismatch:"
    echo -e "  ${BOLD}Root Linux:${RESET}    $ROOT_LINUX_ENTRY"
    echo -e "  ${BOLD}Root Zone:${RESET}     $ROOT_ZONE_ENTRY"
    ERROR=1
fi

if [ "$NONROOT_LINUX_ENTRY" != "$NONROOT_ENTRY_POINT" ]; then
    print_error "Non-root Linux entry point mismatch:"
    echo -e "  ${BOLD}Non-root Linux:${RESET} $NONROOT_LINUX_ENTRY"
    echo -e "  ${BOLD}Entry Point:${RESET}    $NONROOT_ENTRY_POINT"
    ERROR=1
fi

# Check all linux*.json files
check_linux_json_entries "$NONROOT_LINUX_ENTRY"
if [ $? -ne 0 ]; then
    ERROR=1
fi

if [ $ERROR -eq 0 ]; then
    print_success "All entry points match correctly!"
fi

echo -e "\n${BOLD}${GREEN}✓ Script completed successfully${RESET}"